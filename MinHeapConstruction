import java.util.*;
// Do not edit the class below except for the buildHeap,
// siftDown, siftUp, peek, remove, and insert methods.
// Feel free to add new properties and methods to the class.
class Program {
  static class MinHeap {
    List<Integer> heap = new ArrayList<Integer>();
    public MinHeap(List<Integer> array) {
      heap = buildHeap(array);
    }
    public List<Integer> buildHeap(List<Integer> array) {
      int parentIndex = (array.size() - 2) / 2;
			for(int i = parentIndex; i >= 0; i--){
				siftDown(i, array.size() - 1, array);
			}
      return array;
    }
    public void siftDown(int currentIdx, int endIdx, List<Integer> heap) {
      int childLeft = 2 * currentIdx + 1;
			int childRight = 2 * currentIdx + 2;
			if(childRight > endIdx) return;
			if(heap.get(childLeft) < heap.get(currentIdx)) swap(childLeft, currentIdx, heap);
			if(heap.get(childRight) < heap.get(currentIdx)) swap(childRight, currentIdx, heap);
			if(childLeft <= endIdx) siftDown(childLeft, endIdx, heap);
			if(childRight <= endIdx) siftDown(childRight, endIdx, heap);
			siftUp(endIdx, heap);
		}
		 public void swap(int start, int end, List<Integer> heap){
			int temp = heap.get(start);
			heap.set(start, heap.get(end));
			heap.set(end, temp);
		}
    public void siftUp(int currentIdx, List<Integer> heap) {
      int parentIndex = (currentIdx - 1) / 2;
			while(currentIdx > 0 && heap.get(currentIdx) < heap.get(parentIndex)){
				swap(currentIdx, parentIndex, heap);
				currentIdx = parentIndex;
				parentIndex = (currentIdx - 1) / 2;
			}
    }
    public int peek() {
      return heap.get(0);
    }

    public int remove() {
			int value = heap.get(0);
			swap(0, heap.size() - 1, heap);
			heap.remove(heap.size() - 1);
			siftDown(0, heap.size() - 1, heap);
      return value;
    }
    public void insert(int value) {
      heap.add(value);
			siftUp(heap.size() - 1, heap);
    }
  }
}
